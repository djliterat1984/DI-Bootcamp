
ðŸŒŸ Exercise 1: Creating a New React Project with TypeScript using Vite
What You Will Learn:

How to set up a new React project with TypeScript using Vite.
How to use the create-vite tool to initialize a project.
How to install necessary dependencies and start the development server.
Time Needed: 10 minutes

Instructions
Create a new Vite project with React and TypeScript template
Install all necessary dependencies
Start the development server
Verify the project is running correctly
Success Criteria:

Vite + React welcome page visible in browser
TypeScript configuration files present
Development server running without errors


ðŸŒŸ Exercise 2: Creating a React Component with TypeScript
What You Will Learn:

How to create a functional React component using TypeScript.
How to define and enforce types for props using TypeScript interfaces.
How to render JSX while ensuring type safety through TypeScript.
Time Needed: 15 minutes

Instructions
Create a new Greeting.tsx component file
Define an interface for props including name and messageCount
Create the component using the defined props
Implement the component in App.tsx
Success Criteria:

Component compiles without TypeScript errors
Props are properly typed and enforced
Component renders correctly with provided props


ðŸŒŸ Exercise 3: Using useState Hook with TypeScript in React
What You Will Learn:

How to use the useState hook to manage state in a functional React component
How to type the useState hook using TypeScript
How to create and manage a state-changing function with TypeScript
Time Needed: 20 minutes

Instructions
Create a new Counter.tsx component
Implement state management for counter value
Add increment and decrement functionality
Track last action performed
Add proper TypeScript types for all state variables
Success Criteria:

Counter increments and decrements correctly
Last action updates appropriately
All state updates are properly typed


ðŸŒŸ Exercise 4: Creating a React Component with Optional Props
What You Will Learn:

How to define an interface with optional props in TypeScript.
How to handle optional props in a React component.
How to provide default content when optional props are not available.
Time Needed: 15 minutes

Instructions
Create a new UserCard.tsx component
Define interface with optional name, age, and role props
Implement default values for optional props
Test component with various prop combinations
Success Criteria:

Component works with all props provided
Component works with some props omitted
Default values display correctly
TypeScript properly handles optional props


ðŸŒŸ Exercise 5: Using useEffect Hook with TypeScript in React
What You Will Learn:

How to use the useEffect hook in a functional React component.
How to fetch data from an API using useEffect.
How to handle loading state and display data in the component.
Time Needed: 20 minutes

Instructions
Create a new UserList.tsx component
Define User interface for API data
Implement loading and error states
Fetch and display user data from the API https://jsonplaceholder.typicode.com/users. Use the useEffect hook to fetch data from the API when the component mounts.
Handle potential errors properly
Display the fetched data in the component.
Success Criteria:

Data fetches and displays correctly
Loading state shows while fetching
Errors are properly handled and displayed
All API data is properly typed
