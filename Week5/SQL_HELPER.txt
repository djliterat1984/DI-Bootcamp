CREATE TABLE actors(
 actor_id SERIAL PRIMARY KEY,
 first_name VARCHAR (50) NOT NULL,
 last_name VARCHAR (100) NOT NULL,
 age DATE NOT NULL,
 number_oscars SMALLINT NOT NULL
)

Documentation on SELECT
https://www.postgresqltutorial.com/postgresql-select/

SELECT * FROM table_name;

SELECT
 column_1,
 column_2,
 ...
FROM
 table_name;

Documentation on INSERT
https://www.postgresqltutorial.com/postgresql-insert/

INSERT INTO table (column1, column2, …)
VALUES
    (value1, value2, …),
    (value1, value2, …) ,...;

WHERE
Documentation on WHERE
https://www.postgresqltutorial.com/postgresql-where/
Tutorial Here
https://www.dofactory.com/sql/where

SELECT select_list
FROM table_name
WHERE condition;

Operator	Description
=	Equal
>	Greater than
<	Less than
>=	Greater than or equal
<=	Less than or equal
<> or !=	Not equal
AND	Logical operator AND
OR	Logical operator OR

UPDATE

UPDATE table
SET column1 = value1,
    column2 = value2 ,...
WHERE => (optional)
    condition;
RETURNING => (optional)
    column1, 
    column2;

DELETE

To delete data from a table, you use PostgreSQL DELETE statement.
DELETE FROM table
WHERE condition;

To delete all rows in a table, you can omit the WHERE clause :
DELETE FROM table;

You can also return the deleted record using RETURNING
DELETE FROM actors WHERE actor_id=4
RETURNING actor_id, first_name, last_name, number_oscars;

TRUNCATE
To delete all rows in a table, you can also use the TRUNCATE statement:
The TRUNCATE TABLE statement removes all rows from a table without scanning it. This is the reason 
why it is faster than the DELETE statement.
In addition, the TRUNCATE TABLE statement reclaims the storage right away.
RESTART IDENTITY restarts the SERIAL column.

TRUNCATE TABLE table_name RESTART IDENTITY;

ALTER a table
To change the existing table structure, you use PostgreSQL ALTER TABLE statement.
ALTER TABLE table_name action;

Add a new column
ALTER TABLE table_name ADD COLUMN new_column_name TYPE;

Remove an existing column
ALTER TABLE table_name DROP COLUMN column_name;

Rename an existing column
ALTER TABLE table_name RENAME COLUMN column_name TO new_column_name;

Rename a table
ALTER TABLE table_name RENAME TO new_table_name;

Change the data type of a column
ALTER TABLE table_name
ALTER COLUMN column_name1 [SET DATA] TYPE new_data_type;
ALTER COLUMN column_name2 [SET DATA] TYPE new_data_type;

DROP a table
To remove an existing table from the database, you use the DROP TABLE statement.
DROP TABLE IF EXISTS table_name;

Function	Description
avg(expression)	Returns the average of the expression values from all rows in a group.
count(expression)	Returns the number of values, per each aggregated group of rows, for which 
                  expression is not NULL
max(expression)	Returns the maximum value of expression in the grouped rows
min(expression)	Returns the minimum value of expression in the grouped rows
stddev(expression)	Returns the standard deviation of the values of expression in the grouped rows
sum(expression)	Returns the sum of the values of expression in the grouped rows
variance(expression)	Returns the variance of the values of expression in the grouped rows

Alias : AS keyword
SELECT column_name AS alias_name
FROM table_name;

SELECT column_name(s)
FROM table_name AS alias_name;

DISTINCT keyword
The use of the DISTINCT keyword in an aggregate expression causes only grouped rows with unique values 
to be evaluated by the function. Any duplicate rows will be suppressed.
Documentation SELECT DISTINCT: https://www.postgresqltutorial.com/postgresql-select-distinct/
SELECT
   DISTINCT column_1
FROM
   table_name;

IN/NOT IN operator syntax
You use the IN operator in the WHERE clause to check if a value matches any value in a list of values. 
The syntax of the IN operator is as follows:
SELECT * FROM actors WHERE first_name (not) in ('Matt','Lea','Davis');

BETWEEN AND operator syntax
SELECT * FROM actors WHERE age between '1961-01-01' and '1962-01-01';

GROUP BY
The GROUP BY clause must appear right after the FROM or WHERE clause. Following the GROUP BY clause 
is one column or a list of comma-separated columns.

SELECT 
   column_1, 
   column_2,
   aggregate_function(column_3)
FROM 
   table_name
GROUP BY  *If you don’t use GROUP BY while using an aggregate function, with several other fields, you will get an error
   column_1,
   column_2;

HAVING
We often use the HAVING clause in conjunction with the GROUP BY clause to filter group rows 
that do not satisfy a specified condition.

Syntax

SELECT
    column_1,
    aggregate_function (column_2)
FROM
    tbl_name
GROUP BY
    column_1
HAVING
    condition;

UNION
The UNION operator combines result sets of two or more SELECT statements into a single result set.

Syntax

SELECT
    column_1,
    column_2
FROM
    tbl_name_1
UNION
SELECT
    column_1,
    column_2
FROM
    tbl_name_2;

FOREIGN KEY constraint
CREATE TABLE movies(
	movie_id SERIAL,
	movie_title VARCHAR (50) NOT NULL,
	movie_story TEXT,
	actor_playing_id INTEGER,
	PRIMARY KEY (movie_id),
	FOREIGN KEY (actor_playing_id) REFERENCES actors (actor_id)
);



1
480
474
773
28
596
11
691
200
856
752
447
816
731
377
98
928
126
155
410
293
239
194
747
659
426
244
381
803
601
702
125
264
439
413
628
694
347
282
550
688
533
479
282
654
202
502
980
501
641
462
18
242
253
437
414
787
621
592
352
586
631
650
763
633
690
715
590
579
890
615
511
331
771
709
267
213
812
370
551
235
574
351
541
462
940
402
957
911
869
128
37
257
449
903
841
554
895
728
363
308
372
203
5
724
35
945
48
662
72
51
921
231
387
492
380
706
331
110
826
805
512
310
131
810
356
595
402
523
476
705
548
338
797
350
859
846
845
841
827
88
820
942
613
376
99
406
25
21
458
75
963
382
419
501
961
894
405
980
984
468
199
673
55
267
54
819
4
796
936
852
664
73
997
10
460
648
122
428
643
568
451
714
8
854
988
695
161
930
651
925
627
74
230
578
121
165
879
805
746
985
60
736
934
105
771
157
398
949
51
880
475
167
870
786
673
395
383
809
274
848
245
723
569
235
69
753
493
463
861
921
488
76
302
335
881
863
901
429
152
160
92
813
94
295
676
604
22
964
365
480
612
15
737
27
554
215
57
478
184
305
972
946
991
121
377
727
785
948
375
284
285
725
470
498
744
439
465
869
10
385
85
95
693
43
345
234
703
724
505
511
896
101
682
394
107
911
133
97
39
786
588
344
540
7
713
927
701
598
263
140
17
754
249
97
562
471
707
376
549
473
269
776
814
964
681
168
860
908
353
542
873
728
251
286
226
642
109
865
979
380
693
354
486
45
595
326
423
796
345
58
423
835
680
544
367
249
330
586
668
619
567
452
63
692
307
531
155
544
820
243
387
500
970
535
710
734
766
288
897
114
951
630
632
760
922
232
710
250
880
753
908
654
761
295
800
534
914
256
557
994
366
835
150
46
319
378
441
924
767
894
23
109
843
538
315
568
324
29
463
660
68
361
672
666
31
552
206
856
496
111
834
286
185
90
491
916
123
840
972
794
790
656
162
649
344
697
679
861
255
489
389
204
545
276
739
143
266
838
341
846
305
96
6
521
585
859
500
696
675
494
438
300
858
781
30
618
455
322
543
624
683
78
163
271
311
865
622
563
602
445
960
127
629
609
381
990
912
150
138
220
11
559
941
451
175
38
359
978
217
436
296
123
676
308
893
164
932
403
794
468
938
374
868
638
574
216
961
831
176
999
536
530
546
207
320
680
782
778
702
23
311
905
711
560
982
727
716
149
575
327
196
871
722
886
591
399
719
298
590
844
39
838
900
519
166
576
995
772
864
592
525
216
6
575
147
808
571
870
645
144
821
91
677
369
883
852
211
534
393
313
397
755
624
897
190
135
25
179
41
167
893
822
807
218
61
839
739
332
151
965
173
280
516
287
891
515
131
89
853
397
678
594
339
867
525
930
773
467
791
112
429
292
717
313
608
652
975
901
304
864
743
906
43
208
606
342
408
488
285
329
749
755
266
837
379
783
368
514
888
116
59
665
685
118
153
333
49
748
138
301
602
487
116
939
127
68
392
902
795
536
457
941
193
777
737
619
40
7
183
726
317
906
741
31
212
527
803
718
432
625
334
290
944
20
450
18
388
245
435
875
798
775
447
833
542
440
483
328
239
137
730
119
314
205
780
518
521
388
943
86
948
364
657
969
842
637
793
690
993
700
431
129
353
759
454
643
509
237
147
182
734
425
154
1000
281
198
945
158
271
915
279
333
976
824
583
19
757
105
4
17
936
434
649
777
721
64
62
306
770
301
757
987
577
477
599
79
670
968
411
687
979
823
674
708
287
293
807
140
791
932
651
337
874
646
70
337
458
229
73
849
920
174
916
187
866
189
639
391
949
562
302
855
513
346
416
957
877
146
802
524
273
181
991
63
12
917
850
184
722
830
214
206
373
889
490
99
343
684
324
361
115
882
378
164
139
989
19
558
849
259
200
473
762
973
369
418
597
989
953
67
986
232
847
606
268
77
252
136
902
806
600
910
238
502
417
483
909
246
792
448
616
975
453
298
833
573
233
48
341
581
415
621
154
201
563
851
775
227
607
243
262
134
326
655
537
788
986
857
887
66
829
186
730
255
24
183
108
657
120
620
223
637
408
907
309
21
177
392
180
610
584
467
461
330
698
601
645
145
617
124
876
572
421
45
322
194
366
962
556
825
952
349
707
456
647
327
937
16
746
139
689
299
130
175
564
159
303
319
644
22
767
318
191
50
942
570
644
89
789
741
720
982
122
495
788
204
891
263
166
566
938
403
913
956
479
292
261
117
114
57
317
818
725
9
814
384
933
923
456
531
694
385
660
444
2
508
811
281
699
453
812
976
151
996
747
93
998
92
954
815
130
100
759
817
284
666
709
170
850
892
280
689
806
571
50
816
178
958
445
357
529
42
218
401
748
810
12
843
497
958
297
436
599
681
464
225
222
195
614
275
749
277
772
650
132
141
708
506
496
56
579
129
626
983
963
687
415
844
785
503
863
768
283
86
149
743
774
485
899
887
732
443
446
745
555
78
254
679
188
254
608
448
461
951
304
620
371
481
547
432
995
898
82
321
729
346
596
228
115
799
580
252
269
275
892
103
950
641
560
756
158
95
875
628
981
160
738
323
779
135
658
973
446
56
476
443
260
193
504
992
522
240
36
895
782
91
59
395
77
329
106
253
44
420
248
551
635
970
410
407
300
1
224
80
733
506
191
430
83
671
197
469
291
234
273
742
778
117
87
614
672
486
35
507
918
696
499
605
336
349
829
913
715
944
914
270
845
464
212
981
100
912
482
611
334
603
720
119
935
565
993
698
670
143
74
561
9
610
170
922
251
512
640
228
409
904
578
427
222
733
133
236
804
241
414
294
26
141
374
828
717
494
294
363
186
54
61
667
102
67
953
567
818
433
417
929
634
350
169
677
83
873
389
438
478
555
229
553
434
52
440
549
118
638
937
159
985
871
258
142
877
738
691
589
418
712
192
851
81
209
623
764
572
396
481
518
636
545
484
312
422
668
524
758
751
890
665
967
557
855
409
336
233
609
653
466
173
491
862
444
288
53
325
72
314
580
683
919
517
745
416
37
667
587
768
424
920
244
735
370
857
367
55
391
16
247
242
226
966
428
1000
926
663
274
971
896
15
583
33
373
600
804
433
987
465
611
13
723
570
382
631
303
769
32
231
386
459
265
272
103
686
210
879
69
307
735
309
112
663
340
974
457
593
489
437
977
648
26
878
539
215
740
172
884
862
390
616
174
227
999
784
171
526
289
132
484
199
760
270
959
348
400
162
790
784
14
510
47
623
471
365
966
716
603
764
697
900
442
406
664
219
44
832
65
420
320
559
704
661
113
798
504
472
71
836
662
70
247
704
528
220
169
362
765
176
924
655
646
3
789
582
915
189
898
917
412
351
355
424
356
354
556
34
750
101
360
625
797
744
520
142
404
885
800
706
776
90
84
412
925
955
181
801
669
221
460
988
450
358
872
827
647
79
967
532
358
165
172
383
278
514
947
316
104
842
823
49
763
931
156
527
148
